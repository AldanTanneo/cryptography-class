<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="870" onload="init(evt)" viewBox="0 0 1200 870" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="870" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="853.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="853.00"> </text><svg id="frames" x="10" width="1180" total_samples="10645"><g><title>perf-exec (5 samples, 0.05%)</title><rect x="0.0000%" y="805" width="0.0470%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="5"/><text x="0.2500%" y="815.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="0.0000%" y="789" width="0.0470%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="5"/><text x="0.2500%" y="799.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="0.0000%" y="773" width="0.0470%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="5"/><text x="0.2500%" y="783.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="0.0000%" y="757" width="0.0470%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="5"/><text x="0.2500%" y="767.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="0.0000%" y="741" width="0.0470%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="5"/><text x="0.2500%" y="751.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="0.0000%" y="725" width="0.0470%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="5"/><text x="0.2500%" y="735.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="0.0000%" y="709" width="0.0470%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="5"/><text x="0.2500%" y="719.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="0.0000%" y="693" width="0.0470%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="5"/><text x="0.2500%" y="703.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="0.0000%" y="677" width="0.0470%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="5"/><text x="0.2500%" y="687.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="0.0000%" y="661" width="0.0470%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="5"/><text x="0.2500%" y="671.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="0.0000%" y="645" width="0.0470%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="5"/><text x="0.2500%" y="655.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="0.0000%" y="629" width="0.0470%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="5"/><text x="0.2500%" y="639.50"></text></g><g><title>[unknown] (4 samples, 0.04%)</title><rect x="0.0094%" y="613" width="0.0376%" height="15" fill="rgb(216,20,37)" fg:x="1" fg:w="4"/><text x="0.2594%" y="623.50"></text></g><g><title>[unknown] (4 samples, 0.04%)</title><rect x="0.0094%" y="597" width="0.0376%" height="15" fill="rgb(206,188,39)" fg:x="1" fg:w="4"/><text x="0.2594%" y="607.50"></text></g><g><title>[unknown] (4 samples, 0.04%)</title><rect x="0.0094%" y="581" width="0.0376%" height="15" fill="rgb(217,207,13)" fg:x="1" fg:w="4"/><text x="0.2594%" y="591.50"></text></g><g><title>[unknown] (4 samples, 0.04%)</title><rect x="0.0094%" y="565" width="0.0376%" height="15" fill="rgb(231,73,38)" fg:x="1" fg:w="4"/><text x="0.2594%" y="575.50"></text></g><g><title>[unknown] (4 samples, 0.04%)</title><rect x="0.0094%" y="549" width="0.0376%" height="15" fill="rgb(225,20,46)" fg:x="1" fg:w="4"/><text x="0.2594%" y="559.50"></text></g><g><title>[unknown] (4 samples, 0.04%)</title><rect x="0.0094%" y="533" width="0.0376%" height="15" fill="rgb(210,31,41)" fg:x="1" fg:w="4"/><text x="0.2594%" y="543.50"></text></g><g><title>[[stack]] (7 samples, 0.07%)</title><rect x="0.0470%" y="789" width="0.0658%" height="15" fill="rgb(221,200,47)" fg:x="5" fg:w="7"/><text x="0.2970%" y="799.50"></text></g><g><title>shake128::round (6 samples, 0.06%)</title><rect x="0.0564%" y="773" width="0.0564%" height="15" fill="rgb(226,26,5)" fg:x="6" fg:w="6"/><text x="0.3064%" y="783.50"></text></g><g><title>[libc.so.6] (6 samples, 0.06%)</title><rect x="0.1127%" y="789" width="0.0564%" height="15" fill="rgb(249,33,26)" fg:x="12" fg:w="6"/><text x="0.3627%" y="799.50"></text></g><g><title>shake128::round (6 samples, 0.06%)</title><rect x="0.1127%" y="773" width="0.0564%" height="15" fill="rgb(235,183,28)" fg:x="12" fg:w="6"/><text x="0.3627%" y="783.50"></text></g><g><title>shake128::keccak (3 samples, 0.03%)</title><rect x="0.2067%" y="773" width="0.0282%" height="15" fill="rgb(221,5,38)" fg:x="22" fg:w="3"/><text x="0.4567%" y="783.50"></text></g><g><title>shake128::keccak_p (34 samples, 0.32%)</title><rect x="0.2349%" y="773" width="0.3194%" height="15" fill="rgb(247,18,42)" fg:x="25" fg:w="34"/><text x="0.4849%" y="783.50"></text></g><g><title>shake128::round (305 samples, 2.87%)</title><rect x="0.5543%" y="773" width="2.8652%" height="15" fill="rgb(241,131,45)" fg:x="59" fg:w="305"/><text x="0.8043%" y="783.50">sh..</text></g><g><title>[unknown] (601 samples, 5.65%)</title><rect x="0.1785%" y="789" width="5.6458%" height="15" fill="rgb(249,31,29)" fg:x="19" fg:w="601"/><text x="0.4285%" y="799.50">[unknow..</text></g><g><title>shake128::theta (256 samples, 2.40%)</title><rect x="3.4194%" y="773" width="2.4049%" height="15" fill="rgb(225,111,53)" fg:x="364" fg:w="256"/><text x="3.6694%" y="783.50">sh..</text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::consume_with (1,190 samples, 11.18%)</title><rect x="5.9089%" y="421" width="11.1790%" height="15" fill="rgb(238,160,17)" fg:x="629" fg:w="1190"/><text x="6.1589%" y="431.50">std::io::buffere..</text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::buffer (10 samples, 0.09%)</title><rect x="16.9939%" y="405" width="0.0939%" height="15" fill="rgb(214,148,48)" fg:x="1809" fg:w="10"/><text x="17.2439%" y="415.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (231 samples, 2.17%)</title><rect x="17.0878%" y="373" width="2.1700%" height="15" fill="rgb(232,36,49)" fg:x="1819" fg:w="231"/><text x="17.3378%" y="383.50">&lt;..</text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::fill_buf (231 samples, 2.17%)</title><rect x="17.0878%" y="357" width="2.1700%" height="15" fill="rgb(209,103,24)" fg:x="1819" fg:w="231"/><text x="17.3378%" y="367.50">s..</text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_buf (229 samples, 2.15%)</title><rect x="17.1066%" y="341" width="2.1512%" height="15" fill="rgb(229,88,8)" fg:x="1821" fg:w="229"/><text x="17.3566%" y="351.50">s..</text></g><g><title>&lt;std::io::stdio::StdinLock as std::io::Read&gt;::read_buf (229 samples, 2.15%)</title><rect x="17.1066%" y="325" width="2.1512%" height="15" fill="rgb(213,181,19)" fg:x="1821" fg:w="229"/><text x="17.3566%" y="335.50">&lt;..</text></g><g><title>__GI___libc_read (226 samples, 2.12%)</title><rect x="17.1348%" y="309" width="2.1231%" height="15" fill="rgb(254,191,54)" fg:x="1824" fg:w="226"/><text x="17.3848%" y="319.50">_..</text></g><g><title>[unknown] (224 samples, 2.10%)</title><rect x="17.1536%" y="293" width="2.1043%" height="15" fill="rgb(241,83,37)" fg:x="1826" fg:w="224"/><text x="17.4036%" y="303.50">[..</text></g><g><title>[unknown] (218 samples, 2.05%)</title><rect x="17.2100%" y="277" width="2.0479%" height="15" fill="rgb(233,36,39)" fg:x="1832" fg:w="218"/><text x="17.4600%" y="287.50">[..</text></g><g><title>[unknown] (216 samples, 2.03%)</title><rect x="17.2287%" y="261" width="2.0291%" height="15" fill="rgb(226,3,54)" fg:x="1834" fg:w="216"/><text x="17.4787%" y="271.50">[..</text></g><g><title>[unknown] (215 samples, 2.02%)</title><rect x="17.2381%" y="245" width="2.0197%" height="15" fill="rgb(245,192,40)" fg:x="1835" fg:w="215"/><text x="17.4881%" y="255.50">[..</text></g><g><title>[unknown] (210 samples, 1.97%)</title><rect x="17.2851%" y="229" width="1.9728%" height="15" fill="rgb(238,167,29)" fg:x="1840" fg:w="210"/><text x="17.5351%" y="239.50">[..</text></g><g><title>[unknown] (205 samples, 1.93%)</title><rect x="17.3321%" y="213" width="1.9258%" height="15" fill="rgb(232,182,51)" fg:x="1845" fg:w="205"/><text x="17.5821%" y="223.50">[..</text></g><g><title>[unknown] (193 samples, 1.81%)</title><rect x="17.4448%" y="197" width="1.8131%" height="15" fill="rgb(231,60,39)" fg:x="1857" fg:w="193"/><text x="17.6948%" y="207.50">[..</text></g><g><title>[unknown] (169 samples, 1.59%)</title><rect x="17.6703%" y="181" width="1.5876%" height="15" fill="rgb(208,69,12)" fg:x="1881" fg:w="169"/><text x="17.9203%" y="191.50"></text></g><g><title>[unknown] (150 samples, 1.41%)</title><rect x="17.8488%" y="165" width="1.4091%" height="15" fill="rgb(235,93,37)" fg:x="1900" fg:w="150"/><text x="18.0988%" y="175.50"></text></g><g><title>[unknown] (77 samples, 0.72%)</title><rect x="18.5345%" y="149" width="0.7233%" height="15" fill="rgb(213,116,39)" fg:x="1973" fg:w="77"/><text x="18.7845%" y="159.50"></text></g><g><title>[unknown] (59 samples, 0.55%)</title><rect x="18.7036%" y="133" width="0.5543%" height="15" fill="rgb(222,207,29)" fg:x="1991" fg:w="59"/><text x="18.9536%" y="143.50"></text></g><g><title>[unknown] (57 samples, 0.54%)</title><rect x="18.7224%" y="117" width="0.5355%" height="15" fill="rgb(206,96,30)" fg:x="1993" fg:w="57"/><text x="18.9724%" y="127.50"></text></g><g><title>[unknown] (34 samples, 0.32%)</title><rect x="18.9385%" y="101" width="0.3194%" height="15" fill="rgb(218,138,4)" fg:x="2016" fg:w="34"/><text x="19.1885%" y="111.50"></text></g><g><title>[unknown] (21 samples, 0.20%)</title><rect x="19.0606%" y="85" width="0.1973%" height="15" fill="rgb(250,191,14)" fg:x="2029" fg:w="21"/><text x="19.3106%" y="95.50"></text></g><g><title>[unknown] (11 samples, 0.10%)</title><rect x="19.1545%" y="69" width="0.1033%" height="15" fill="rgb(239,60,40)" fg:x="2039" fg:w="11"/><text x="19.4045%" y="79.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="19.2391%" y="53" width="0.0188%" height="15" fill="rgb(206,27,48)" fg:x="2048" fg:w="2"/><text x="19.4891%" y="63.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="19.2391%" y="37" width="0.0188%" height="15" fill="rgb(225,35,8)" fg:x="2048" fg:w="2"/><text x="19.4891%" y="47.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (1,427 samples, 13.41%)</title><rect x="5.8713%" y="517" width="13.4054%" height="15" fill="rgb(250,213,24)" fg:x="625" fg:w="1427"/><text x="6.1213%" y="527.50">&lt;&amp;mut I as core::ite..</text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,427 samples, 13.41%)</title><rect x="5.8713%" y="501" width="13.4054%" height="15" fill="rgb(247,123,22)" fg:x="625" fg:w="1427"/><text x="6.1213%" y="511.50">&lt;core::iter::adapter..</text></g><g><title>core::iter::traits::iterator::Iterator::find_map (1,427 samples, 13.41%)</title><rect x="5.8713%" y="485" width="13.4054%" height="15" fill="rgb(231,138,38)" fg:x="625" fg:w="1427"/><text x="6.1213%" y="495.50">core::iter::traits::..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1,427 samples, 13.41%)</title><rect x="5.8713%" y="469" width="13.4054%" height="15" fill="rgb(231,145,46)" fg:x="625" fg:w="1427"/><text x="6.1213%" y="479.50">core::iter::traits::..</text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,424 samples, 13.38%)</title><rect x="5.8995%" y="453" width="13.3772%" height="15" fill="rgb(251,118,11)" fg:x="628" fg:w="1424"/><text x="6.1495%" y="463.50">&lt;std::io::Bytes&lt;R&gt; a..</text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::SpecReadByte&gt;::spec_read_byte (1,424 samples, 13.38%)</title><rect x="5.8995%" y="437" width="13.3772%" height="15" fill="rgb(217,147,25)" fg:x="628" fg:w="1424"/><text x="6.1495%" y="447.50">&lt;std::io::buffered::..</text></g><g><title>std::io::uninlined_slow_read_byte (233 samples, 2.19%)</title><rect x="17.0878%" y="421" width="2.1888%" height="15" fill="rgb(247,81,37)" fg:x="1819" fg:w="233"/><text x="17.3378%" y="431.50">s..</text></g><g><title>std::io::inlined_slow_read_byte (233 samples, 2.19%)</title><rect x="17.0878%" y="405" width="2.1888%" height="15" fill="rgb(209,12,38)" fg:x="1819" fg:w="233"/><text x="17.3378%" y="415.50">s..</text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (233 samples, 2.19%)</title><rect x="17.0878%" y="389" width="2.1888%" height="15" fill="rgb(227,1,9)" fg:x="1819" fg:w="233"/><text x="17.3378%" y="399.50">&lt;..</text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;[u8]&gt;::read (2 samples, 0.02%)</title><rect x="19.2579%" y="373" width="0.0188%" height="15" fill="rgb(248,47,43)" fg:x="2050" fg:w="2"/><text x="19.5079%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (1,428 samples, 13.41%)</title><rect x="5.8713%" y="533" width="13.4147%" height="15" fill="rgb(221,10,30)" fg:x="625" fg:w="1428"/><text x="6.1213%" y="543.50">&lt;core::iter::adapter..</text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::SpecFold&gt;::spec_fold (2,169 samples, 20.38%)</title><rect x="5.8713%" y="549" width="20.3758%" height="15" fill="rgb(210,229,1)" fg:x="625" fg:w="2169"/><text x="6.1213%" y="559.50">&lt;core::iter::adapters::zip::Zip&lt;..</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (741 samples, 6.96%)</title><rect x="19.2860%" y="533" width="6.9610%" height="15" fill="rgb(222,148,37)" fg:x="2053" fg:w="741"/><text x="19.5360%" y="543.50">core::ite..</text></g><g><title>shake128::keccak::_{{closure}} (741 samples, 6.96%)</title><rect x="19.2860%" y="517" width="6.9610%" height="15" fill="rgb(234,67,33)" fg:x="2053" fg:w="741"/><text x="19.5360%" y="527.50">shake128:..</text></g><g><title>core::iter::traits::iterator::Iterator::count (2,281 samples, 21.43%)</title><rect x="5.8713%" y="613" width="21.4279%" height="15" fill="rgb(247,98,35)" fg:x="625" fg:w="2281"/><text x="6.1213%" y="623.50">core::iter::traits::iterator::Iter..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,281 samples, 21.43%)</title><rect x="5.8713%" y="597" width="21.4279%" height="15" fill="rgb(247,138,52)" fg:x="625" fg:w="2281"/><text x="6.1213%" y="607.50">&lt;core::iter::adapters::map::Map&lt;I,..</text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,281 samples, 21.43%)</title><rect x="5.8713%" y="581" width="21.4279%" height="15" fill="rgb(213,79,30)" fg:x="625" fg:w="2281"/><text x="6.1213%" y="591.50">&lt;core::iter::adapters::zip::Zip&lt;A,..</text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::fold (2,281 samples, 21.43%)</title><rect x="5.8713%" y="565" width="21.4279%" height="15" fill="rgb(246,177,23)" fg:x="625" fg:w="2281"/><text x="6.1213%" y="575.50">&lt;core::iter::adapters::zip::Zip&lt;A,..</text></g><g><title>shake128::keccak (112 samples, 1.05%)</title><rect x="26.2471%" y="549" width="1.0521%" height="15" fill="rgb(230,62,27)" fg:x="2794" fg:w="112"/><text x="26.4971%" y="559.50"></text></g><g><title>shake128::chi (2,142 samples, 20.12%)</title><rect x="28.6707%" y="581" width="20.1221%" height="15" fill="rgb(216,154,8)" fg:x="3052" fg:w="2142"/><text x="28.9207%" y="591.50">shake128::chi</text></g><g><title>[unknown] (7 samples, 0.07%)</title><rect x="48.7271%" y="565" width="0.0658%" height="15" fill="rgb(244,35,45)" fg:x="5187" fg:w="7"/><text x="48.9771%" y="575.50"></text></g><g><title>[unknown] (7 samples, 0.07%)</title><rect x="48.7271%" y="549" width="0.0658%" height="15" fill="rgb(251,115,12)" fg:x="5187" fg:w="7"/><text x="48.9771%" y="559.50"></text></g><g><title>[unknown] (7 samples, 0.07%)</title><rect x="48.7271%" y="533" width="0.0658%" height="15" fill="rgb(240,54,50)" fg:x="5187" fg:w="7"/><text x="48.9771%" y="543.50"></text></g><g><title>[unknown] (7 samples, 0.07%)</title><rect x="48.7271%" y="517" width="0.0658%" height="15" fill="rgb(233,84,52)" fg:x="5187" fg:w="7"/><text x="48.9771%" y="527.50"></text></g><g><title>[unknown] (7 samples, 0.07%)</title><rect x="48.7271%" y="501" width="0.0658%" height="15" fill="rgb(207,117,47)" fg:x="5187" fg:w="7"/><text x="48.9771%" y="511.50"></text></g><g><title>[unknown] (6 samples, 0.06%)</title><rect x="48.7365%" y="485" width="0.0564%" height="15" fill="rgb(249,43,39)" fg:x="5188" fg:w="6"/><text x="48.9865%" y="495.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="48.7459%" y="469" width="0.0470%" height="15" fill="rgb(209,38,44)" fg:x="5189" fg:w="5"/><text x="48.9959%" y="479.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="48.7459%" y="453" width="0.0470%" height="15" fill="rgb(236,212,23)" fg:x="5189" fg:w="5"/><text x="48.9959%" y="463.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="48.7459%" y="437" width="0.0470%" height="15" fill="rgb(242,79,21)" fg:x="5189" fg:w="5"/><text x="48.9959%" y="447.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="48.7459%" y="421" width="0.0470%" height="15" fill="rgb(211,96,35)" fg:x="5189" fg:w="5"/><text x="48.9959%" y="431.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="48.7459%" y="405" width="0.0470%" height="15" fill="rgb(253,215,40)" fg:x="5189" fg:w="5"/><text x="48.9959%" y="415.50"></text></g><g><title>[unknown] (4 samples, 0.04%)</title><rect x="48.7553%" y="389" width="0.0376%" height="15" fill="rgb(211,81,21)" fg:x="5190" fg:w="4"/><text x="49.0053%" y="399.50"></text></g><g><title>[unknown] (4 samples, 0.04%)</title><rect x="48.7553%" y="373" width="0.0376%" height="15" fill="rgb(208,190,38)" fg:x="5190" fg:w="4"/><text x="49.0053%" y="383.50"></text></g><g><title>[unknown] (4 samples, 0.04%)</title><rect x="48.7553%" y="357" width="0.0376%" height="15" fill="rgb(235,213,38)" fg:x="5190" fg:w="4"/><text x="49.0053%" y="367.50"></text></g><g><title>shake128::iota (75 samples, 0.70%)</title><rect x="48.7929%" y="581" width="0.7046%" height="15" fill="rgb(237,122,38)" fg:x="5194" fg:w="75"/><text x="49.0429%" y="591.50"></text></g><g><title>shake128::pi (316 samples, 2.97%)</title><rect x="49.4974%" y="581" width="2.9685%" height="15" fill="rgb(244,218,35)" fg:x="5269" fg:w="316"/><text x="49.7474%" y="591.50">sha..</text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="64.6125%" y="565" width="0.0188%" height="15" fill="rgb(240,68,47)" fg:x="6878" fg:w="2"/><text x="64.8625%" y="575.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="64.6125%" y="549" width="0.0188%" height="15" fill="rgb(210,16,53)" fg:x="6878" fg:w="2"/><text x="64.8625%" y="559.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="64.6125%" y="533" width="0.0188%" height="15" fill="rgb(235,124,12)" fg:x="6878" fg:w="2"/><text x="64.8625%" y="543.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="64.6125%" y="517" width="0.0188%" height="15" fill="rgb(224,169,11)" fg:x="6878" fg:w="2"/><text x="64.8625%" y="527.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="64.6125%" y="501" width="0.0188%" height="15" fill="rgb(250,166,2)" fg:x="6878" fg:w="2"/><text x="64.8625%" y="511.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="64.6125%" y="485" width="0.0188%" height="15" fill="rgb(242,216,29)" fg:x="6878" fg:w="2"/><text x="64.8625%" y="495.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="64.6125%" y="469" width="0.0188%" height="15" fill="rgb(230,116,27)" fg:x="6878" fg:w="2"/><text x="64.8625%" y="479.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="64.6125%" y="453" width="0.0188%" height="15" fill="rgb(228,99,48)" fg:x="6878" fg:w="2"/><text x="64.8625%" y="463.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="64.6125%" y="437" width="0.0188%" height="15" fill="rgb(253,11,6)" fg:x="6878" fg:w="2"/><text x="64.8625%" y="447.50"></text></g><g><title>shake128::rho (2,422 samples, 22.75%)</title><rect x="52.4659%" y="581" width="22.7525%" height="15" fill="rgb(247,143,39)" fg:x="5585" fg:w="2422"/><text x="52.7159%" y="591.50">shake128::rho</text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1,127 samples, 10.59%)</title><rect x="64.6313%" y="565" width="10.5871%" height="15" fill="rgb(236,97,10)" fg:x="6880" fg:w="1127"/><text x="64.8813%" y="575.50">core::num::&lt;imp..</text></g><g><title>shake128::round (55 samples, 0.52%)</title><rect x="75.2184%" y="581" width="0.5167%" height="15" fill="rgb(233,208,19)" fg:x="8007" fg:w="55"/><text x="75.4684%" y="591.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="95.5096%" y="565" width="0.0188%" height="15" fill="rgb(216,164,2)" fg:x="10167" fg:w="2"/><text x="95.7596%" y="575.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="95.5096%" y="549" width="0.0188%" height="15" fill="rgb(220,129,5)" fg:x="10167" fg:w="2"/><text x="95.7596%" y="559.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="95.5096%" y="533" width="0.0188%" height="15" fill="rgb(242,17,10)" fg:x="10167" fg:w="2"/><text x="95.7596%" y="543.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="95.5096%" y="517" width="0.0188%" height="15" fill="rgb(242,107,0)" fg:x="10167" fg:w="2"/><text x="95.7596%" y="527.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="95.5096%" y="501" width="0.0188%" height="15" fill="rgb(251,28,31)" fg:x="10167" fg:w="2"/><text x="95.7596%" y="511.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="95.5096%" y="485" width="0.0188%" height="15" fill="rgb(233,223,10)" fg:x="10167" fg:w="2"/><text x="95.7596%" y="495.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="95.5096%" y="469" width="0.0188%" height="15" fill="rgb(215,21,27)" fg:x="10167" fg:w="2"/><text x="95.7596%" y="479.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="95.5096%" y="453" width="0.0188%" height="15" fill="rgb(232,23,21)" fg:x="10167" fg:w="2"/><text x="95.7596%" y="463.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="95.5096%" y="437" width="0.0188%" height="15" fill="rgb(244,5,23)" fg:x="10167" fg:w="2"/><text x="95.7596%" y="447.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="95.5096%" y="421" width="0.0188%" height="15" fill="rgb(226,81,46)" fg:x="10167" fg:w="2"/><text x="95.7596%" y="431.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="95.5096%" y="405" width="0.0188%" height="15" fill="rgb(247,70,30)" fg:x="10167" fg:w="2"/><text x="95.7596%" y="415.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="95.5096%" y="389" width="0.0188%" height="15" fill="rgb(212,68,19)" fg:x="10167" fg:w="2"/><text x="95.7596%" y="399.50"></text></g><g><title>shake128::keccak_p (7,436 samples, 69.85%)</title><rect x="27.2992%" y="613" width="69.8544%" height="15" fill="rgb(240,187,13)" fg:x="2906" fg:w="7436"/><text x="27.5492%" y="623.50">shake128::keccak_p</text></g><g><title>shake128::round (7,392 samples, 69.44%)</title><rect x="27.7125%" y="597" width="69.4411%" height="15" fill="rgb(223,113,26)" fg:x="2950" fg:w="7392"/><text x="27.9625%" y="607.50">shake128::round</text></g><g><title>shake128::theta (2,280 samples, 21.42%)</title><rect x="75.7351%" y="581" width="21.4185%" height="15" fill="rgb(206,192,2)" fg:x="8062" fg:w="2280"/><text x="75.9851%" y="591.50">shake128::theta</text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (173 samples, 1.63%)</title><rect x="95.5284%" y="565" width="1.6252%" height="15" fill="rgb(241,108,4)" fg:x="10169" fg:w="173"/><text x="95.7784%" y="575.50"></text></g><g><title>shake128::chi (95 samples, 0.89%)</title><rect x="97.2194%" y="597" width="0.8924%" height="15" fill="rgb(247,173,49)" fg:x="10349" fg:w="95"/><text x="97.4694%" y="607.50"></text></g><g><title>shake128::pi (11 samples, 0.10%)</title><rect x="98.1212%" y="597" width="0.1033%" height="15" fill="rgb(224,114,35)" fg:x="10445" fg:w="11"/><text x="98.3712%" y="607.50"></text></g><g><title>shake128::rho (87 samples, 0.82%)</title><rect x="98.2245%" y="597" width="0.8173%" height="15" fill="rgb(245,159,27)" fg:x="10456" fg:w="87"/><text x="98.4745%" y="607.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (38 samples, 0.36%)</title><rect x="98.6848%" y="581" width="0.3570%" height="15" fill="rgb(245,172,44)" fg:x="10505" fg:w="38"/><text x="98.9348%" y="591.50"></text></g><g><title>shake128::round (2 samples, 0.02%)</title><rect x="99.0418%" y="597" width="0.0188%" height="15" fill="rgb(236,23,11)" fg:x="10543" fg:w="2"/><text x="99.2918%" y="607.50"></text></g><g><title>all (10,645 samples, 100%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(205,117,38)" fg:x="0" fg:w="10645"/><text x="0.2500%" y="831.50"></text></g><g><title>shake128 (10,640 samples, 99.95%)</title><rect x="0.0470%" y="805" width="99.9530%" height="15" fill="rgb(237,72,25)" fg:x="5" fg:w="10640"/><text x="0.2970%" y="815.50">shake128</text></g><g><title>_start (10,025 samples, 94.18%)</title><rect x="5.8243%" y="789" width="94.1757%" height="15" fill="rgb(244,70,9)" fg:x="620" fg:w="10025"/><text x="6.0743%" y="799.50">_start</text></g><g><title>__libc_start_main_impl (10,025 samples, 94.18%)</title><rect x="5.8243%" y="773" width="94.1757%" height="15" fill="rgb(217,125,39)" fg:x="620" fg:w="10025"/><text x="6.0743%" y="783.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (10,025 samples, 94.18%)</title><rect x="5.8243%" y="757" width="94.1757%" height="15" fill="rgb(235,36,10)" fg:x="620" fg:w="10025"/><text x="6.0743%" y="767.50">__libc_start_call_main</text></g><g><title>std::rt::lang_start (10,025 samples, 94.18%)</title><rect x="5.8243%" y="741" width="94.1757%" height="15" fill="rgb(251,123,47)" fg:x="620" fg:w="10025"/><text x="6.0743%" y="751.50">std::rt::lang_start</text></g><g><title>std::rt::lang_start_internal (10,025 samples, 94.18%)</title><rect x="5.8243%" y="725" width="94.1757%" height="15" fill="rgb(221,13,13)" fg:x="620" fg:w="10025"/><text x="6.0743%" y="735.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::_{{closure}} (10,025 samples, 94.18%)</title><rect x="5.8243%" y="709" width="94.1757%" height="15" fill="rgb(238,131,9)" fg:x="620" fg:w="10025"/><text x="6.0743%" y="719.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (10,025 samples, 94.18%)</title><rect x="5.8243%" y="693" width="94.1757%" height="15" fill="rgb(211,50,8)" fg:x="620" fg:w="10025"/><text x="6.0743%" y="703.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (10,025 samples, 94.18%)</title><rect x="5.8243%" y="677" width="94.1757%" height="15" fill="rgb(245,182,24)" fg:x="620" fg:w="10025"/><text x="6.0743%" y="687.50">core::ops::function::FnOnce::call_once</text></g><g><title>shake128::main (10,025 samples, 94.18%)</title><rect x="5.8243%" y="661" width="94.1757%" height="15" fill="rgb(242,14,37)" fg:x="620" fg:w="10025"/><text x="6.0743%" y="671.50">shake128::main</text></g><g><title>shake128::shake128 (10,025 samples, 94.18%)</title><rect x="5.8243%" y="645" width="94.1757%" height="15" fill="rgb(246,228,12)" fg:x="620" fg:w="10025"/><text x="6.0743%" y="655.50">shake128::shake128</text></g><g><title>shake128::keccak (10,025 samples, 94.18%)</title><rect x="5.8243%" y="629" width="94.1757%" height="15" fill="rgb(213,55,15)" fg:x="620" fg:w="10025"/><text x="6.0743%" y="639.50">shake128::keccak</text></g><g><title>shake128::round (303 samples, 2.85%)</title><rect x="97.1536%" y="613" width="2.8464%" height="15" fill="rgb(209,9,3)" fg:x="10342" fg:w="303"/><text x="97.4036%" y="623.50">sh..</text></g><g><title>shake128::theta (100 samples, 0.94%)</title><rect x="99.0606%" y="597" width="0.9394%" height="15" fill="rgb(230,59,30)" fg:x="10545" fg:w="100"/><text x="99.3106%" y="607.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (4 samples, 0.04%)</title><rect x="99.9624%" y="581" width="0.0376%" height="15" fill="rgb(209,121,21)" fg:x="10641" fg:w="4"/><text x="100.2124%" y="591.50"></text></g></svg></svg>